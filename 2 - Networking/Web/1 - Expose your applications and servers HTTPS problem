As you may have noticed whenever you access to any resources on you server in a LAN environment
every single time your browser will notify that you are accessing to an HTTP website and not to an HTTPS.
This may lead to security issues.
As we know that the application or the server is our we can skip that messagge going to 'Advanced' and 'Proceed to the website' or something similar.

But what happens if we want to avoid that messagge
We could hide it (even if some instruction are actually not working) or decide to remove the problem at roots

As we know that we need an SSL certificate we may want to install it for our machine/server.

The problem is that you need a domain (I tried via certbot on Linux).
If you do not have it you may still want to do that.

Anyways the most well known service for free SSL states:

"Let’s Encrypt can’t provide certificates for “localhost” because nobody uniquely owns it, and it’s not rooted in a top level domain like “.com” or “.net”. "

The best solution according to Let's Envrypt is:

"The best option: Generate your own certificate, either self-signed or signed by a local root, and trust it in your operating system’s trust store. Then use that certificate in your local web server. See below for details.""

"Fortunately, modern browsers consider http://127.0.0.1:8000/ to be a “potentially trustworthy” URL because it refers to a loopback address. Traffic sent to 127.0.0.1 is guaranteed not to leave your machine, and so is considered automatically secure against network interception. That means if your web app is HTTPS, and you offer a native app web service on 127.0.0.1, the two can happily communicate via XHR. Unfortunately, localhost doesn’t yet get the same treatment. Also, WebSockets don’t get this treatment for either name."

-------------------------------------------
"Making and trusting your own certificates
Anyone can make their own certificates without help from a CA. The only difference is that certificates you make yourself won’t be trusted by anyone else. For local development, that’s fine.

The simplest way to generate a private key and self-signed certificate for localhost is with this openssl command:

openssl req -x509 -out localhost.crt -keyout localhost.key \
  -newkey rsa:2048 -nodes -sha256 \
  -subj '/CN=localhost' -extensions EXT -config <( \
   printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
You can then configure your local web server with localhost.crt and localhost.key, and install localhost.crt in your list of locally trusted roots.

If you want a little more realism in your development certificates, you can use minica to generate your own local root certificate, and issue end-entity (aka leaf) certificates signed by it. You would then import the root certificate rather than a self-signed end-entity certificate.

You can also choose to use a domain with dots in it, like
www.localhost, by adding it to /etc/hosts as an alias to 127.0.0.1.

This subtly changes how browsers handle cookie storage.""
